/*
 * https://www.javacodegeeks.com/2014/10/java-ee-7-jax-rs-2-0-simple-rest-api-authentication-authorization-with-custom-http-header.html
 */
package webzip;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
/**
 *
 * @author Robert.Birkenheuer
 */
public final class Authenticator {
    private static Authenticator authenticator = null;
    
  
    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();
  
    private Authenticator() {

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API.
         */
        loadServiceKeys();
    
    }
  
    public static Authenticator getInstance() {
        if ( authenticator == null ) {
            authenticator = new Authenticator();
        }
  
        return authenticator;
    }
  

    /**
     * This method checks is the service key is valid
     *
     * @param serviceKey
     * @return TRUE if service key matches the pre-generated ones in service key
     * storage. FALSE for otherwise.
     */
    public boolean isServiceKeyValid( String serviceKey ) {
        return serviceKeysStorage.containsKey( serviceKey );
    }
  
    public String getServiceUser(String serviceKey) {
        return serviceKeysStorage.get(serviceKey);
    }

    private void loadServiceKeys() {
        ClassLoader classloader = this.getClass().getClassLoader();

        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "robert" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "tester" );
        
        InputStream inputStream = null;
        try {
            inputStream = classloader.getResourceAsStream("../../META-INF/servicekeys.json");
            String data = readFromInputStream(inputStream);
            //System.out.println(data);
            JSONObject jsonobj = new JSONObject(data);
            JSONArray arr = jsonobj.getJSONArray("servicekeys");
            for (int i = 0; i < arr.length(); i++) {
                serviceKeysStorage.put( arr.getJSONObject(i).getString("key"), arr.getJSONObject(i).getString("folder") );
            }
        }     
        catch (IOException ex) {
            Logger.getLogger(Authenticator.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    Logger.getLogger(Authenticator.class.getName()).log(Level.SEVERE, null, e);
                }
            }
        }
    }
    
    private String readFromInputStream(InputStream inputStream) throws IOException {
        StringBuilder resultStringBuilder = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
            String line;
            while ((line = br.readLine()) != null) {
                resultStringBuilder.append(line).append("\n");
            }
        }
      return resultStringBuilder.toString();
    }
}
